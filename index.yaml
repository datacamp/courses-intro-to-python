- chapter_title: "Python Basics"
  chapter_description: "An introduction to the basic concepts of Python and its place in the Data Science community"
  exercises:
  - type: "VideoExercise"
    title: "First steps into Python"
    content: "A brief history of Python. It's place in data science. The pros (and cons) of using it in data science. Using the Python console for basic calculations. Explain console <-> script. Script to do multiple things at once, include duplication here (to pitch variables in next video)"
  
  - type: "NormalExercise"
    title: "Datacamp's Python interface"
    content: "Stoefen met onze interface"

  - type: "MultipleChoiceExercise"
    title: "When to use it"
    content: "When to use Python? A few use cases are given. You want to do a quick calculation. You want to build a robust software package. You want to analyse some data. All of the above. "

  - type: "NormalExercise"
    title: "Crunch those numbers"
    content: "You and your friends are splitting the tab. You drank 3 cocktails and 5 beers in total.  You want to split the tab evenly. "

  - type: "NormalExercise"
    title: "Generosity comes a long way"
    content: "Instead of splitting the tab evenly you want to pay 50% of the tab yourself and let your friends pay the rest. Your friend think the same thing and pay 50% of what remains (use powers)... (make as simple)"

  - type: "VideoExercise"
    title: "Variables and their types"
    content: "Introducing variables and variable assignment. Avoid duplication in script (built on previous video). The difference between types of variables (using strings and booleans)."

  - type: "NormalExercise"
    title: "Assign all the variables"
    content: "Assign cocktail_price and beer_price here. There is one new person whos name you can't seem to remember so you decide to decide his name to a variable as well. Finally you decide to assign a boolean variable to remember the fact whether you have money left or not."

  - type: "NormalExercise"
    title: "Calculations with variables"
    content: "Redo previous (previous video) calculations, this time with variables. This time cost is in variables: cocktail_price and beer_price. Dit is wat te veel verhaal:You wake up the next morning with the variables still in your memory. You decide to calculate how much you should pay Josh who paid the whole tab. You decide to give him somewhat extra based on that amount."

  - type: "MultipleChoiceExercise"
    title: "Which is what"
    content: "A list of variables is given with a value. Choose the choice which correctly lists their types."

  - type: "NormalExercise"
    title: "Invalid calculations"
    content: "You find some other variables in your memory of which you have little memory. You decide to check out what their type is. After finding out their type you decide to experiment with them a little bit."

  - type: "MultipleChoiceExercise"
    title: "Which are valid and which aren't"
    content: "You are given a list of variables and operations on them. Select which one will result in an error."

  - type: "NormalExercise"
    title: "Did we pay everything? "
    content: "Given the total amount of the tab. Also given - an amount that everyone wants to pay. Do they sum up to the total amount?"

- chapter_title: "Lists"
  description: "Lists are a very big part of the Python language. In this chapter they will be introduced and some basic operations will be done with them."
  exercises:
  - type: "VideoExercise"
    title: "Lists, what are they?"
    content: "How to create a list and what's the difference with a normal object. What can be contained in a list. Introduce several examples of lists"
  
  - type: "MultipleChoiceExercise"
    title: "Which is valid, which isn't?"
    content: "A few examples of lists are given, the student must select which are valid lists."
    
  - type: "NormalExercise"
    title: "Picking up the tab"
    content: "You're out with friends again, this time for food. This time you want keep track of what you're eating. Your entree was a Caesar Salade which costed 18 dollars, which was healthy. The main dish was ribs for 35 dollars, which was unhealthy. For drinks, you had a coke for 3 dollars, which was unhealthy. Keep them all in seperate variables (no list yet)."
    
  - type: "NormalExercise"
    title: "Picking up the tab (2)"
    content: "In the last exercise you had to define a seperate variable for all the things you wanted to keep in your memory. This time put them in a list -> ['Ceasar Salade', 18, True, 'Ribs', 35, False, 'Coke', 3, False]. Use type() on this."
    
  - type: "VideoExercise"
    title: "Subsetting a list"
    content: "You know how to create lists. But what if you want to check the content of one element of the list. Introduce simple subsetting using [..] notation. List start indexing at 0. Negative indexes count from the right. Slices using : (with or without left and right elements: `1:5`, `1:`, `:5`, `:` all valid)"
    
  - type: "MultipleChoiceExercise"
    title: "Which element will it return?"
    content: "A list and an index operation is given; choose which element(s) it will return."
    
  - type: "NormalExercise"
    title: "Basic indexing"
    content: "You are given same list as before (Picking up teh tab (2)). Select the name of the main dish and whether it was healthy. You also want to know the price of the coke (Use right indexing)."
    
  - type: "NormalExercise"
    title: "Working with elements of the list"
    content: "Working with the same list. Select the price of the salad and assign it to a variable, same for ribs and cola. Check the types of the assigned variables. Calculate the total cost."
    
  - type: "NormalExercise"
    title: "Slicing makes the world go round"
    content: "Working with the same list. You want to retrieve all information about the main dish [3:6]. All information about the entree [:3]. All information about the coke [6:]. What about [:]?"
    
  - type: "VideoExercise"
    title: "Manipulate those lists"
    content: "A great thing about lists is that you can change them. First explain setting using [..] = . Then explain append and remove. Explain how assigning a list to a variable will assign a reference and how to use the copy [:] operator to prevent this. Maybe explain sort()" 
    
  - type: "NormalExercise"
    title: "Changing elements in the list"
    content: "Working with dinner list. You remember you put a lot of sauce on the salade, so it was not quite healthy. Change the list using subsetting [..]. Cola was 2.5 instead of 3, use right subsetting this time [-..] = 3. You remember you didn't order a Caesar Salad for 18 dollar as an entree. Instead you ate bacon, which was not healthy and costed 13 dollars. Use slice subsetting and = to change the entree: dinner[:3] = [...]"
    
  - type: "NormalExercise"
    title: "Appending and removing"
    content: "You suddenly remember you should remove the main dish from the list, as you didn't really liked it so you didn't eat it. Instead, you ate desert, which you want to append to the end of the list."
    
  - type: "MultipleChoiceExercise"
    title: "Deleting splices"
    content: "You want to delete the entree from the list. What command will you use to do it in a one liner? del(dinner[:3])"
    
  - type: "NormalExercise"
    title: "Effect of changing the list"
    content: "Make a new variable which refers to the list dinner_ref = dinner. Change dinner_ref, see what it does. Repeat but now with copy [:]."
    
  - type: "NormalExercise"
    title: "Sorting the list"
    content: "Given a list with the prices, sort the list using .sort()"
    
- chapter_title: "Functions and packages"
  description: "Some of the main functionality in python is included into the predefined functions. Introduce functions and packages and how to call functions from pacakges using the dot notation."
  exercises:
  - type: "VideoExercise"
    title: "Functions, what are they?"
    content: "Begin by explaining that some of basic motivation of functions: you want to do a sequence of commands. Put it in a function! () notation. Some you already used: print(), type() -> make abstraction of some often used sequence of commands. Explain arguments (don't go into detail about keywords and stuff; it's confusing). Some basic python functions: min(), max(), sum(can have 2 arguments!)"
    
  - type: "NormalExercise"  
    title: "Calling a function"
    content: "Call print without () -> you don't call the function. Use print() without argument -> prints empty string. Call print with 'Hello World!, it works!'"
    
  - type: "NormalExercise"
    title: "Need some help"
    content: "Explain how to use the help() function -> would be nice to point to the online help files here."
    
  - type: "NormalExercise"   
    title: "List as argument"
    content: "Given the prices you spend on dinner for the last week. Find the minimum and maximum using built-in functions min and max."
    
  - type: "NormalExercise" 
    title: "Use two arguments"
    content: "Given the same list, calculate the total by adding them all and by using sum. You want to start counting from -30, as this is what you spared out last week. Use sum(list, -30)"
    
  - type: "VideoExercise"
    title: "Packages"
    content: "A lot of code has been written for python, as it is open source. Don't reinvent the wheel. Solution: Packages!!! Packages contain predefined functions which you can use, written by other people. Some examples: math, numpy, scipy. Import package using import math. Now you can use math.<function>. Explain as and from ... import ... to use functions without math. ."
    
  - type: "MultipleChoiceExercise"
    title: "Importing the package"
    content: "An import statement is given. Which subsequent command will succeed (will not result in an error)."
    
  - type: "NormalExercise"
    title: "Have some pi"
    content: "You boasted with your friends about how you know pi until the 10th decimal. However, disaster struck and for the live of you, you can not remember the digits. Luckily, shortly before meeting your friends you have access to a python console. Import math. print(math.pi). Learn first 10 digits."
    
  - type: "NormalExercise"
    title: "How far to run"
    content: "You have to a 30 degrees of a circle-shaped track. The diameter is 100 meters. Use from math import radians."
    
  - type: "NormalExercise"
    title: "Math teachers..."
    content: "Your math teacher wants you to give the sine, cosine AND tangens of 32 degrees. Use import math as m to save some typing time!"

- chapter_title: "Numpy"
  description: "You got acquainted with the basics of python. Time to dive into some very usefull packages. First up: numpy."
  exercises:
  - type: "VideoExercise"
    title: "Numpy: from coding to math"
    content: "Introduce numpy. Very import feature: numpy.array. Convert a normal list into a mathematical object. Vector arithmetic. What does + do to a normal list: concat."

  - type: "NormalExercise"
    title: "Getting started with numpy"
    content: "This is an easy one. Just import numpy. As we are going to use numpy a lot, it's best to import it as np."
    
  - type: "NormalExercise"
    title: "Calculate the total"
    content: "Given: budget spent on dinner last week. budget spent on dinner this week. Add them up. You want to calculate the price in euros: multiply."
    
  - type: "NormalExercise"
    title: "Tipping to survive"
    content: "Being a generous person, you always tip for service in a restaurant. However, the mood you're in will greatly influence the percentage of the dinner price you'll tip. On mondays you are in a bad mood, you only tip 5%. On tuesdays till thursday you'll tip 15%. In the weekends you're always in a great mood, so you'll tip 25%. Use numpy (np.array(dinner_prices)*(np.array([0.05, 0.15, 0.15, 0.15, 0.25, 0.25, 0.25]) + 1))"
    
  - type:
    title:
    content:
    
  - type:
    title:
    content:
    
  - type:
    title:
    content:
    
  - type:
    title:
    content:
    
  
  
  
    
    