- chapter_title: "Python Basics"
  chapter_description: "An introduction to the basic concepts of Python and its place in the Data Science community"
  exercises:
  - type: "VideoExercise"
    title: "First steps into Python"
    content: "A brief history of Python. It's place in data science. The pros (and cons) of using it in data science. Using the Python console for basic calculations. Explain console <-> script. Script to do multiple things at once, include duplication here (to pitch variables in next video)"
  
  - type: "NormalExercise"
    title: "Datacamp's Python interface"
    content: "Introduce the interface -- similar to introduction to R"

  - type: "MultipleChoiceExercise"
    title: "When to use it"
    content: "When to use Python? A few use cases are given. You want to do a quick calculation. You want to build a robust software package. You want to analyse some data. All of the above. "

  - type: "NormalExercise"
    title: "Crunch those numbers"
    content: "You and your friends are splitting the tab. You drank 3 cocktails and 5 beers in total.  You want to split the tab evenly. "

  - type: "NormalExercise"
    title: "Generosity comes a long way"
    content: "Instead of splitting the tab evenly you want to pay 50% of the tab yourself and let your friends pay the rest. Your friend think the same thing and pay 50% of what remains (use powers)... (make as simple as possible :-), people might not understand)"

  - type: "VideoExercise"
    title: "Variables and their types"
    content: "Introducing variables and variable assignment. Avoid duplication in script (built on previous video). The difference between types of variables (using strings and booleans)."

  - type: "NormalExercise"
    title: "Assign all the variables"
    content: "Assign cocktail_price and beer_price here. There is one new person whos name you can't seem to remember so you decide to decide his name to a variable as well. Finally you decide to assign a boolean variable to remember the fact whether you have money left or not."

  - type: "NormalExercise"
    title: "Calculations with variables"
    content: "Redo previous (previous video) calculations, this time with variables. This time cost is in variables: cocktail_price and beer_price. (Maybe use parts of this story, probably a bit over the top: You wake up the next morning with the variables still in your memory. You decide to calculate how much you should pay Josh who paid the whole tab. You decide to give him somewhat extra based on that amount.)"

  - type: "NormalExercise"
    title: "Calculations with variables (2)"
    content: "Redo previous (previous video) calculations, this time EVERYTHING is a variables (so also how much beer and cocktail)."
    
  - type: "MultipleChoiceExercise"
    title: "Which is what"
    content: "A list of variables is given with a value. Choose the choice which correctly lists their types."

  - type: "NormalExercise"
    title: "Invalid calculations"
    content: "You find some other variables in your memory of which you have little memory. You decide to check out what their type is. After finding out their type you decide to experiment with them a little bit. str + str works, str * int works. str + int error"

  - type: "MultipleChoiceExercise"
    title: "Which are valid and which aren't"
    content: "You are given a list of variables and operations on them. Select which one will result in an error."

  - type: "NormalExercise"
    title: "Did we pay everything? "
    content: "Given the total amount of the tab. Also given - an amount that everyone wants to pay. Do they sum up to the total amount? Variable for total, variable for each paying friend."

- chapter_title: "Lists"
  description: "Lists are a very big part of the Python language. In this chapter they will be introduced and some basic operations will be done with them."
  exercises:
  - type: "VideoExercise"
    title: "Lists, what are they?"
    content: "How to create a list and what's the difference with a normal object. What can be contained in a list. Introduce several examples of lists."
  
  - type: "NormalExercise"
    title: "Picking up the tab"
    content: "You're out with friends again, this time for food. This time you want keep track of what you and your friends are eating. Friend1 had a Caesar Salade which costed 18 dollars, which was healthy but not so good ..... Friend2 had some Ribs which costed 35 dollars, was unhealthy but very tasty, ... Use no lists yet here, make them put everything in seperate variables (very painful!)"
    
  - type: "NormalExercise"
    title: "Picking up the tab (2)"
    content: "In the last exercise you had to define a seperate variable for all the things you wanted to keep in your memory.This time put them in lists -> friend1 = ['Ceasar Salade', 18, True, False] friend2 = ['Ribs', 35, False, True] friend3 = ['Coke', 3, False, True].... (maybe introduce list of lists? putting them all in 1 big list -> probably better in next exercise)"
    
  - type: "MultipleChoiceExercise"
    title: "Which is valid, which isn't?"
    content: "A few examples of lists are given, the student must select which are valid lists. Include list of lists here (previous exercise)"
    
  - type: "NormalExercise"
    title: "List inception"
    content: "Make dinner list of lists here. Might seem duplication, but can't hurt to make them create the list of lists themselves."
    
  - type: "VideoExercise"
    title: "Subsetting a list"
    content: "You know how to create lists. But what if you want to check the content of one element of the list. Introduce simple subsetting using [..] notation. List start indexing at 0. Negative indexes count from the right. Slices using : (with or without left and right elements: `1:5`, `1:`, `:5`, `:` all valid)"
    
  - type: "NormalExercise"
    title: "Basic indexing"
    content: "You are given same list as before (Picking up the tab (2), e.g. list of friend1, not the list of lists). Select the name of the main dish and whether it was healthy. You also want to know the price using right indexing."
    
  - type: "NormalExercise"
    title: "Working with elements of the list"
    content: "Working with the same list. Select the price of friends. Check the types of the assigned variables. Calculate the total cost."
    
  - type: "NormalExercise"
    title: "Slicing makes the world go round"
    content: "EDIT WITH NEW DATA Working with the same list. You want to retrieve all information about the main dish [3:6]. All information about the entree [:3]. All information about the coke [6:]. What about [:]?"
  
  - type: "MultipleChoiceExercise"
    title: "Which element will it return?"
    content: "list of lists here!!! A list and an index operation is given; choose which element(s) it will return."
    
  - type: "VideoExercise"
    title: "Manipulate those lists"
    content: "A great thing about lists is that you can change them. First explain setting using [..] = . Then explain append and del (be careful here). Maybe don't use append but [1,3,4] + [1] instead. Explain how assigning a list to a variable will assign a reference and how to use the copy [:] operator to prevent this." 
    
  - type: "NormalExercise"
    title: "Changing elements in the list"
    content: "EDIT FOR NEW DATA + mss teveel hier-- opassen.Working with dinner list. You remember you put a lot of sauce on the salade, so it was not quite healthy. Change the list using subsetting [..]. Cola was 2.5 instead of 3, use right subsetting this time [-..] = 3. You remember you didn't order a Caesar Salad for 18 dollar as an entree. Instead you ate bacon, which was not healthy and costed 13 dollars. Use slice subsetting and = to change the entree: dinner[:3] = [...]"
    
  - type: "NormalExercise"
    title: "Appending and deleting"
    content: "You suddenly remember you should remove the main dish from the list, as you didn't really liked it so you didn't eat it. Instead, you ate desert, which you want to append to the end of the list."
    
  - type: "MultipleChoiceExercise"
    title: "Deleting splices"
    content: "You want to delete the entree from the list. What command will you use to do it in a one liner? del(dinner[:3])"
    
  - type: "NormalExercise"
    title: "Effect of changing the list"
    content: "Make a new variable which refers to the list dinner_ref = dinner. Change dinner_ref, see what it does. Repeat but now with copy [:]."
    
- chapter_title: "Functions and packages"
  description: "Some of the main functionality in python is included into the predefined functions. Introduce functions and packages and how to call functions from pacakges using the dot notation."
  exercises:
  - type: "VideoExercise"
    title: "Functions, what are they?"
    content: "Begin by explaining that some of basic motivation of functions: you want to do a sequence of commands. Put it in a function! () notation. Some you already used: print()(, type(), geen functie) -> make abstraction of some often used sequence of commands. Explain arguments (don't go into detail about keywords and stuff; it's confusing). Some basic python functions: min(), max(), sum(can have 2 arguments!). Dit is simplificatie (bv. enkel positional arguments -- vermeld dit even kort)"
    
  - type: "NormalExercise"  
    title: "Calling a function"
    content: "Call print without () -> you don't call the function. Use print() without argument -> prints empty string. Call print with 'Hello World!, it works!'"
    
  - type: "NormalExercise"
    title: "Need some help"
    content: "Explain how to use the help() function -> would be nice to point to the online help files here."
    
  - type: "NormalExercise"   
    title: "List as argument"
    content: "Given the prices you spend on dinner for the last week. Find the minimum and maximum using built-in functions min and max."
    
  - type: "NormalExercise" 
    title: "Use two arguments"
    content: "Given the same list, calculate the total by adding them all and by using sum. You want to start counting from -30, as this is what you spared out last week. Use sum(list, -30)"

  - type: "NormalExercise"
    title: "Misschien nog eentje"
    content: "Niet zeker"
    
  - type: "VideoExercise"
    title: "Packages"
    content: "A lot of code has been written for python, as it is open source. Don't reinvent the wheel. Solution: Packages!!! Packages contain predefined functions which you can use, written by other people. Some examples: math, numpy, scipy. Import package using import math. Now you can use math.<function>. Explain as and from ... import ... to use functions without math. ."
    
  - type: "MultipleChoiceExercise"
    title: "Importing the package"
    content: "An import statement is given. Which of the following command will succeed (will not result in an error)."
    
  - type: "NormalExercise"
    title: "Have some pi"
    content: "You boasted with your friends about how you know pi until the 10th decimal. However, disaster struck and for the live of you, you can not remember the digits. Luckily, shortly before meeting your friends you have access to a python console. Import math. print(math.pi). Learn first 10 digits."
    
  - type: "NormalExercise"
    title: "How far to run"
    content: "You have to run over 30 degrees of a circle-shaped track. The diameter is 100 meters. Use from math import radians."
    
  - type: "NormalExercise"
    title: "Math teachers..."
    content: "Your math teacher wants you to give the sine, cosine AND tangens of 32 degrees. Use import math as m to save some typing time!"

- chapter_title: "Numpy"
  description: "You got acquainted with the basics of python. Time to dive into some very usefull packages. First up: numpy."
  exercises:
  - type: "VideoExercise"
    title: "Numpy: from coding to math"
    content: "Introduce numpy. Very import feature: numpy.array. Convert a normal list into a mathematical object. Subsetting. Vector arithmetic. What does + do to a normal list: concat. Don't mention appending or removing for numpy arrays yet."

  - type: "NormalExercise"
    title: "Getting started with numpy"
    content: "This is an easy one. Just import numpy. As we are going to use numpy a lot, it's best to import it as np."
  
  - type: "NormalExercise"
    title: "Your first numpy array"
    content: "Create a numpy array with a certain content. Output the array. Very basic stuff."
    
  - type: "NormalExercise"
    title: "Subsetting in numpy"
    content: "An array is given with budget spent on dinner last week. Make a numpy array of it. Subset it using the same techniques you learned in the lists chapter."
    
  - type: "NormalExercise"
    title: "Calculate the total"
    content: "Given: budget spent on dinner last week. budget spent on dinner this week. You want to know how much you spent per day. Add them up. You want to calculate the price in euros: multiply."
  
  - type: "MultipleChoice"
    title: "Why numpy?"
    content: "Try the same calculations as before, this time use regular lists. What result do you expect? - the same - concat - error - ..."
    
  - type: "NormalExercise"
    title: "Tipping to survive"
    content: "Being a generous person, you always tip for service in a restaurant. However, the mood you're in will greatly influence the percentage of the dinner price you'll tip. On mondays you are in a bad mood, you only tip 5%. On tuesdays till thursday you'll tip 15%. In the weekends you're always in a great mood, so you'll tip 25%. Use numpy (np.array(dinner_prices)*(np.array([0.05, 0.15, 0.15, 0.15, 0.25, 0.25, 0.25]) + 1))"
    
  - type: "NormalExercise"
    title: "Company dinner"
    content: "You organized a company dinner and it's time to pay the bill. There were 5 dishes from which the employees could choose: Burger with fries (cost: 12, employees: 3); Caesar Salad (cost: 18, employees: 2); Chicken Salad (cost: 20, employees: 3); Steak (cost: 25, employees: 3); Fish (cost: 22, employees: 2). Calculate total cost using sum and np.array(...) * np.array(...)"
    
  - type: "VideoExercise"
    title: "Numpy in two dimensions"
    content: "Numpy can handle vectors with two dimensions as well. Compare with list of lists in chapter about lists. Explain subsetting in comparison with list of lists subsetting. Basic arithmetic."
    
  - type: "NormalExercise" 
    title: "Your first matrix"
    content: "Given a list of lists, create a numpy matrix using this list of lists. Print it out. Very basic stuff"
    
  - type: "NormalExercise"
    title: "Subsetting the matrix"
    content: "Given the matrix you created before, do some subsetting operations to single out elements. Maybe use slices here as well, wouldn't hurt."
    
  - type: "NormalExercise"
    title: "Dinner for the family"
    content: "This time you have a np.array() of money spend on dinner this week for each member of the family. Put them all together in one 2-D np.array."
    
  - type: "NormalExercise"
    title: "Cost over the weeks"
    content: "You have two 2-D numpy arrays similar to the one in the previous exercise. Add them together to see how much each family member spends on dinner each day. (output in euro's for scalar multiplication?)"
    
  - type: "VideoExercise"
    title: "Basic statistics with numpy"
    content: "You can use numpy to get some summary statistics on data. np.mean, np.median for more robust measure (example with outlier). np.sum + np.size can reach the same effect as np.mean. np.std for standard deviation. explain standard deviation as measure of spread (very intuitive)."
    
  - type: "NormalExercise"
    title: "Spendings on dinner"
    content: "Array with money spent on dinner for the last year (check size with np.size first). Take the mean to find out how much you spend on dinner on average."
  
  - type: "NormalExercise"
    title: "Minding the outliers"
    content: "There was an outlier in the array (check it out with indexing). Try to use median instead. Compare the result with the previous result."
    
  - type: "NormalExercise"
    title: "Spread of the cost"
    content: "... use np.std"
    
- chapter_title: "Matplotlib"
  description: "Basic package to handle plots in Python. We will give a brief overview of all different possibilities. Handling scatterplots, lineplot, histogram and customizing plots."
  exercises:
  - type: "VideoExercise"
    title: "Matplotlib, the basics"
    content: "To create plots in python you can use matplotlib. You should from matplotlib import pyplot (as plt). Use plot() to plot a line plot. You have to show() after creating each plot. Use plt.plot(x,y,'o') to make a scatter plot, or use plt.scatter(x,y)."
    
  - type: "NormalExercise"
    title: "Dinners over the year"
    content: "Create dataset with some nice features: money spend on dinner over the year. Contains 365 entries, each containing money spend on dinner that day, in dollar. (Add some nice features like seasonal dependency and more in the weekends and stuff when creating the dataset -> for the creator). Let them analyse the line plot."
    
  - type: "NormalExercise"
    title: "Best food is healthy"
    content: "x contains the scores on healtiness (0-10) for the food you had for dinner. y contains scores on tastyness (0-10). First plot a line plot using plt.plot() -> looks ugly!! We need a different kind of plot."
    
  - type: "NormalExercise"
    title: "Best food is healthy (2)"
    content: "Same data. This time create a scatter plot. Do you see a relation? Yes -> unhealthy food is tasty."
  
  - type: "NormalExercise"
    title: "Scatter chaos"
    content: "Relations between variables are not always obvious: give new dataset - x healtiness of food (0-10); y distance from home. Messy scatter plot (no linear relationship)"
    
  - type: "VideoExercise"
    title: "Histograms"
    content: "Explain what histograms are and why we want to use them. Explain with example. Show how to use pyplot.hist()."
    
  - type: "NormalExercise"
    title: "Tasty food"
    content: "Plot the tastyness of the food each day from the previous section with a scatter- and  line plot... (not much information there, we need something else!)"
    
  - type: "NormalExercise"
    title: "Tasty food (2)"
    content: "Histograms to the rescue! Create a nice histogram of the tastyness here -> we see some relevant distribution information (don't use the word 'distribution' here, will be confusing)"
    
  - type: "NormalExercise"
    title: "Tasty food (3)"
    content: "Plot the tastyness again with a histogram. This time play with the number of boxes a bit (second argument)."
    
  - type: "VideoExercise"
    title: "Customizing your plots"
    content: "Start by explaining how to add a title and labels to the axis. Then continue by explaining the options in pyplot.plot() -> the form of the points, the color of the line/points, ... this connects with the legend."
    
  - type: "NormalExercise"
    title: "Name your plot"
    content: "Use a previously generated plot, add title, xlabel and ylabel. Use plot of money spend on dinner over the year."
    
  - type: "NormalExercise"
    title: "Comparing with your friends"
    content: "Your friends have also written down how much money they've spend on dinner each day for the last year. Draw all of the graphs in different colors. (no legend yet)"
    
  - type: "NormalExercise"
    title: "Comparing with your friends (2)"
    content: "Continue with previous plot, this time add labels and a legend!"
